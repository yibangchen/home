{"version":3,"sources":["components/home/Navbar.js","components/home/NavbarItems.js","components/animation/showName/Letter.js","components/animation/showName/Alphabet.js","components/home/intro/Intro.js","components/home/Home.js","components/Routes.js","components/Root.js","serviceWorker.js","index.js"],"names":["Navbar","items","onItemClick","currentSection","currentScroll","className","map","item","key","name","onClick","e","NavbarItems","component","EnterColor","Letter","state","y","x","color","fillOpacity","transition","d3","duration","ease","callback","node","this","refs","letter","setState","props","i","attr","style","on","nextProps","dy","fill","font","ref","Component","Alphabet","alphabet","letters","slice","Math","floor","random","length","sort","transform","l","split","content","text","css","Intro","Home","componentWillMount","componentDidMount","componentWillUnmount","handleScroll","scrollToSelection","selectName","_updateCurrentScroll","_getCurrentScroll","_updateCurrentSelection","_isScrollBottom","_onEnterSection","_getNavBarHeight","_getPageElementFromKey","render","el","navbar","routes","path","withRouter","Routes","route","exact","Root","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4003c387.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = ({ items, currentSection, currentScroll, onItemClick}) => {\n\n  const onLinkClick = itemName => {\n    // save for react-ga\n  }\n\n  return (\n    <div>\n      <div className={'navbar navbar-dimensions text-unselectable'}>\n        { items.map( item => <span\n            key={ item.name }\n            onClick = { e => {\n              onItemClick(item.name);\n            }}\n            className={ 'navbar-item navbar-item-dimensions clickable' }\n          >{ item.name }</span>\n        )}\n      </div>\n      <div className=\"navbar-dimensions\"/>\n    </div>\n  )\n}\n\nexport default Navbar;","\n\nconst NavbarItems = [\n  {\n    name: 'about',\n    component: null\n  },   {\n    name: 'resume',\n    component: null\n  },   {\n    name: 'project',\n    component: null\n  },   {\n    name: 'contact',\n    component: null\n  }\n]\n\nexport default NavbarItems;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nconst ExitColor = 'brown',\n      UpdateColor = '#333',\n      EnterColor = 'green';\n\nclass Letter extends Component {\n    state = {\n        y: -60,\n        x: 0,\n        color: EnterColor,\n        fillOpacity: 1e-6\n    }\n    transition = d3.transition()\n                   .duration(750)\n                   .ease(d3.easeCubicInOut);\n\n    componentWillEnter(callback) {\n        let node = d3.select(this.refs.letter);\n\n        this.setState({x: this.props.i*32});\n\n        node.transition(this.transition)\n            .attr('y', 0)\n            .style('fill-opacity', 1)\n            .on('end', () => {\n                this.setState({y: 0,\n                               fillOpacity: 1,\n                               color: UpdateColor});\n                callback()\n            });\n    }\n\n    componentWillLeave(callback) {\n        let node = d3.select(this.refs.letter);\n\n        this.setState({color: ExitColor});\n\n        node.transition(this.transition)\n            .attr('y', 60)\n            .style('fill-opacity', 1e-6)\n            .on('end', () => {\n                this.setState({y: 60,\n                               fillOpacity: 1e-6});\n                callback()\n            });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.i !== nextProps.i) {\n            let node = d3.select(this.refs.letter);\n\n            this.setState({color: UpdateColor});\n\n            node.transition(this.transition)\n                .attr('x', nextProps.i*32)\n                .on('end', () => this.setState({x: nextProps.i*32}));\n        }\n    }\n\n    render() {\n        const { x, y, fillOpacity, color } = this.state;\n\n        return (\n            <text dy=\".35em\"\n                  x={x}\n                  y={y}\n                  style={{fillOpacity: fillOpacity,\n                          fill: color,\n                          font: 'bold 48px monospace'}}\n                  ref=\"letter\">\n                {this.props.letter}\n            </text>\n        );\n    }\n};\n\nexport default Letter;","import React, { Component } from 'react';\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\nimport * as d3 from 'd3';\n\nimport Letter from './Letter';\n\nclass Alphabet extends Component {\n    \n    static letters = \"This is my personal website. It is still under construction. Please come back later\".split('');\n    state = {alphabet: []};\n\n    componentDidMount() {\n        d3.interval(() => this.setState({\n            alphabet: d3.shuffle(Alphabet.letters)\n                        .slice(0, Math.floor(Math.random() * Alphabet.letters.length))\n                        .sort()\n        }), 1500);\n    }\n\n    render() {\n        let transform = `translate(${this.props.x}, ${this.props.y})`;\n\n        return (\n            <g transform={transform}>\n                <TransitionGroup component=\"g\">\n                    {this.state.alphabet.map((l, i) => (\n                        <Letter letter={l} i={i} key={`letter-${l}`} />\n                     ))}\n                </TransitionGroup>\n            </g>\n        );\n    }\n}\n\nexport default Alphabet;","import React from 'react';\nimport Alphabet from '../../animation/showName/Alphabet';\n\nimport './Intro.css';\n\nconst content = {\n  head: {\n    text: \"Hi, I'm Yibang\",\n    css: 'cracked'\n  },\n  desc: {\n    text: 'This is my personal website. It is still under construction. Please come back later'\n  },\n  profile: {\n    url: 'https://www.instagram.com/p/BwP75tpBqYQ/media/?size=l',\n    css: 'profile-picture-container'\n  }\n}\n\nconst Intro = props => (\n  <div className=\"container intro-container\">\n    <div className={ content.head.css }>\n      <span>{ content.head.text }</span>\n      <span>{ content.head.text }</span>\n      <span>{ content.head.text }</span>\n    </div>\n    <p>{ content.desc.text }</p>    \n  {/*\n\n    <div className={ content.profile.css }>\n      <img src={ content.profile.url } alt=\"profile-pic\"/>\n    </div>\n\n        <svg width=\"800\" height=\"600\">\n          <Alphabet x=\"32\" y=\"300\" />\n        </svg> \n    */}\n  </div>\n\n);\n\nexport default Intro;","import React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport Navbar from './Navbar';\nimport NavbarItems from './NavbarItems';\n// import Fireworks from '../animation/Fireworks';\nimport Intro from './intro/Intro';\n\nimport './Home.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { currentScroll: 0, currentSection: \"\" };\n    }\n\n    componentWillMount = () => {      \n    }\n\n    componentDidMount = () => {      \n    }\n\n    componentWillUnmount = () => {      \n    }\n\n    handleScroll = e => {\n    }\n\n    scrollToSelection = selectName => {\n    }\n\n    _updateCurrentScroll = () => {}\n    _getCurrentScroll = () => {}\n    _updateCurrentSelection = () => {}\n    _isScrollBottom = () => {}\n    _onEnterSection = () => {}\n    _getNavBarHeight = () => {}\n    _getPageElementFromKey = () => {}\n\n    render = () => {\n      const { currentSection, currentScroll } = this.state;\n\n      return (\n        <div className=\"root-home\">\n          <div ref={ el => this.navbar = el }>\n            <Navbar \n              items = { NavbarItems }\n              onItemClick = {()=>{}}\n              currentSection = {()=>{}}\n              currentScroll = {()=>{}}\n             />\n          </div>\n          <Intro />\n        </div>\n      );\n    }\n}\n\n// const mapStateToProps = store => ({\n//   projects: store.projects\n// })\n\n// const mapDispatchToProps = dispatch => ({\n\n// })\n\nexport default withRouter(Home);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Home from './home/Home';\n\nconst routes = [\n  {\n    name: \"Home\",\n    path: \"/\",\n    component: Home\n  },\n];\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        { routes.map( route => \n          <Route \n            key = {route.name}\n            exact={route.exact}\n            path={route.path}\n            component={route.component}\n          />          \n          )}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;","import React from 'react';\n\n// import { Provider } from 'react-redux';\n// import store from '../redux/store';\n\nimport Routes from './Routes';\n\nconst Root = () => {\n  return (\n    <Routes/>\n  );\n}\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './components/Root';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}